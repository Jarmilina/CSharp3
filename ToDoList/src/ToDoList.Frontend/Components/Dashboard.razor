@using ToDoList.Frontend.Clients
@using ToDoList.Frontend.Views
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<h1>Můj Dashboard</h1>
<table>
    <thead>
        <tr>
            <th><button class="pink-button" @onclick="() => SortByIdDesc(toDoItems)">Seřaď podle ID</button></th>
            <th><button class="pink-button" @onclick="() => SortByNameDesc(toDoItems)">Seřaď podle názvu</button></th>
        </tr>
        <tr>
            <th>ID</th>
            <th>Název</th>
            <th>Hotovo</th>
        </tr>
    </thead>
    @if (toDoItems is not null)
    {
        @foreach (var toDoItem in toDoItems)
        {
            <tr>
                <td>@toDoItem.ToDoItemId</td>
                <td>@toDoItem.Name</td>
                <td>@toDoItem.IsCompleted</td>
                <td>@toDoItem.Description</td>
            </tr>
        }
    }

</table>

@code
{
    @* protected override void OnInitialized()
{
toDoItems = ToDoItemsClient.ReadItems();
} *@
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }
    private List<ToDoItemView>? toDoItems = [];
    @* private List<ToDoItemView> toDoItems =
[
new ToDoItemView() {ToDoItemId = 1, Name = "Udělat úkol na Czechitas", IsCompleted = false},
new ToDoItemView() {ToDoItemId = 2, Name = "Udělat nepovinný úkol na Czechitas", IsCompleted = false},
]; *@


    public void SortByIdDesc(List<ToDoItemView> toDoItems)
    {
        toDoItems?.Sort((a, b) => b.ToDoItemId.CompareTo(a.ToDoItemId));
    }

    public void SortByNameDesc(List<ToDoItemView> toDoItems)
    {
        toDoItems?.Sort((a, b) => b.Name.CompareTo(a.Name));
    }

    public void SortByIsCompletedDesc(List<ToDoItemView> toDoItems)
    {
        toDoItems?.Sort((a, b) => b.IsCompleted.CompareTo(a.IsCompleted));
    }
}

<!-- a mezi píšeš komentář -->
